import React from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Shield, User, Target, Globe, Phone, Mail, MapPin, Calendar } from 'lucide-react';

interface PolicyConsentDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onAccept: () => void;
  userProfile: any;
  language: string;
}

export const PolicyConsentDialog = ({ 
  open, 
  onOpenChange, 
  onAccept, 
  userProfile, 
  language 
}: PolicyConsentDialogProps) => {
  
  // Translation function
  const getTranslation = (key: string) => {
    const translations = {
      en: {
        title: "Privacy & Data Consent",
        subtitle: "Your data security and privacy matter to us",
        profileReview: "Profile Information Review",
        dataStored: "The following personal information will be securely stored:",
        policyTitle: "Data Protection Policy",
        policyText: "By proceeding, you consent to the collection and processing of your personal information as outlined below:",
        dataUse: "‚Ä¢ Your data will be used exclusively to provide personalized financial guidance",
        dataProtection: "‚Ä¢ All information is encrypted and stored with bank-level security",
        noSharing: "‚Ä¢ We never share your personal data with third parties without explicit consent",
        rightToDelete: "‚Ä¢ You can request data deletion or modification at any time",
        compliance: "‚Ä¢ Full compliance with data protection regulations and privacy laws",
        acceptButton: "I Accept & Continue to Chat",
        declineButton: "Decline",
        personalInfo: "Personal Information",
        financialProfile: "Financial Profile",
        preferences: "Preferences & Goals"
      },
      hi: {
        title: "‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø‡§§‡§æ ‡§î‡§∞ ‡§°‡•á‡§ü‡§æ ‡§∏‡§π‡§Æ‡§§‡§ø",
        subtitle: "‡§Ü‡§™‡§ï‡•Ä ‡§°‡•á‡§ü‡§æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§î‡§∞ ‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø‡§§‡§æ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§≤‡§ø‡§è ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à",
        profileReview: "‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ",
        dataStored: "‡§®‡§ø‡§Æ‡•ç‡§®‡§≤‡§ø‡§ñ‡§ø‡§§ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§∏‡§Ç‡§ó‡•ç‡§∞‡§π‡•Ä‡§§ ‡§ï‡•Ä ‡§ú‡§æ‡§è‡§ó‡•Ä:",
        policyTitle: "‡§°‡•á‡§ü‡§æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§®‡•Ä‡§§‡§ø",
        policyText: "‡§Ü‡§ó‡•á ‡§¨‡§¢‡§º‡§ï‡§∞, ‡§Ü‡§™ ‡§®‡•Ä‡§ö‡•á ‡§¶‡•Ä ‡§ó‡§à ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§∏‡§Ç‡§ó‡•ç‡§∞‡§π ‡§î‡§∞ ‡§™‡•ç‡§∞‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§π‡§Æ‡§§‡§ø ‡§¶‡•á‡§§‡•á ‡§π‡•à‡§Ç:",
        dataUse: "‚Ä¢ ‡§Ü‡§™‡§ï‡§æ ‡§°‡•á‡§ü‡§æ ‡§ï‡•á‡§µ‡§≤ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ",
        dataProtection: "‚Ä¢ ‡§∏‡§≠‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§è‡§®‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü‡•á‡§° ‡§π‡•à ‡§î‡§∞ ‡§¨‡•à‡§Ç‡§ï-‡§∏‡•ç‡§§‡§∞‡•Ä‡§Ø ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§Ç‡§ó‡•ç‡§∞‡§π‡•Ä‡§§ ‡§π‡•à",
        noSharing: "‚Ä¢ ‡§π‡§Æ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§∏‡§π‡§Æ‡§§‡§ø ‡§ï‡•á ‡§¨‡§ø‡§®‡§æ ‡§Ü‡§™‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§°‡•á‡§ü‡§æ ‡§§‡•Ä‡§∏‡§∞‡•á ‡§™‡§ï‡•ç‡§∑ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§æ‡§ù‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡•á",
        rightToDelete: "‚Ä¢ ‡§Ü‡§™ ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§∏‡§Æ‡§Ø ‡§°‡•á‡§ü‡§æ ‡§π‡§ü‡§æ‡§®‡•á ‡§Ø‡§æ ‡§∏‡§Ç‡§∂‡•ã‡§ß‡§® ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç",
        compliance: "‚Ä¢ ‡§°‡•á‡§ü‡§æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§®‡§ø‡§Ø‡§Æ‡•ã‡§Ç ‡§î‡§∞ ‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø‡§§‡§æ ‡§ï‡§æ‡§®‡•Ç‡§®‡•ã‡§Ç ‡§ï‡§æ ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§Ö‡§®‡•Å‡§™‡§æ‡§≤‡§®",
        acceptButton: "‡§Æ‡•à‡§Ç ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§î‡§∞ ‡§ö‡•à‡§ü ‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡§§‡§æ ‡§π‡•Ç‡§Ç",
        declineButton: "‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç",
        personalInfo: "‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä",
        financialProfile: "‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤",
        preferences: "‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ‡§è‡§Ç ‡§î‡§∞ ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø"
      }
    };
    return translations[language]?.[key] || translations.en[key];
  };

  const clientTypes = {
    farmer: { name: { en: 'Farmer', hi: '‡§ï‡§ø‡§∏‡§æ‡§®' }, icon: 'üåæ' },
    student: { name: { en: 'Student | GenZ', hi: '‡§õ‡§æ‡§§‡•ç‡§∞ | ‡§ú‡•á‡§® Z' }, icon: 'üéì' },
    professional: { name: { en: 'Professionals | Entrepreneurs', hi: '‡§™‡•á‡§∂‡•á‡§µ‡§∞ | ‡§â‡§¶‡•ç‡§Ø‡§Æ‡•Ä' }, icon: 'üíº' },
    senior: { name: { en: 'Senior Citizen', hi: '‡§µ‡§∞‡§ø‡§∑‡•ç‡§† ‡§®‡§æ‡§ó‡§∞‡§ø‡§ï' }, icon: 'üë¥' },
    'differently-abled': { name: { en: 'Differently Abled', hi: '‡§¶‡§ø‡§µ‡•ç‡§Ø‡§æ‡§Ç‡§ó' }, icon: '‚ôø' },
    minority: { name: { en: 'Minority | Worker', hi: '‡§Ö‡§≤‡•ç‡§™‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§ï/‡§∂‡•ç‡§∞‡§Æ‡§ø‡§ï' }, icon: 'ü§ù' }
  };

  const experienceLabels = {
    en: {
      beginner: 'Beginner',
      intermediate: 'Intermediate', 
      advanced: 'Advanced'
    },
    hi: {
      beginner: '‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§‡•Ä',
      intermediate: '‡§Æ‡§ß‡•ç‡§Ø‡§Æ',
      advanced: '‡§â‡§®‡•ç‡§®‡§§'
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader className="text-center pb-4">
          <div className="mx-auto mb-4 flex h-14 w-14 items-center justify-center rounded-full bg-gradient-to-br from-primary to-secondary">
            <Shield className="h-7 w-7 text-white" />
          </div>
          <DialogTitle className="text-2xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent">
            {getTranslation('title')}
          </DialogTitle>
          <DialogDescription className="text-lg text-muted-foreground">
            {getTranslation('subtitle')}
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-6">
          {/* Profile Review Section */}
          <Card className="border-2 border-primary/20 bg-gradient-to-br from-primary/5 to-secondary/5">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-lg">
                <User className="h-5 w-5 text-primary" />
                {getTranslation('profileReview')}
              </CardTitle>
              <p className="text-sm text-muted-foreground">
                {getTranslation('dataStored')}
              </p>
            </CardHeader>
            <CardContent className="space-y-4">
              
              {/* Personal Information */}
              <div className="space-y-3">
                <h4 className="font-semibold text-primary flex items-center gap-2">
                  <User className="h-4 w-4" />
                  {getTranslation('personalInfo')}
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3 ml-6">
                  {userProfile.name && (
                    <div className="flex items-center gap-2 text-sm">
                      <User className="h-4 w-4 text-muted-foreground" />
                      <span className="font-medium">Name:</span> {userProfile.name}
                    </div>
                  )}
                  {userProfile.age && (
                    <div className="flex items-center gap-2 text-sm">
                      <Calendar className="h-4 w-4 text-muted-foreground" />
                      <span className="font-medium">Age:</span> {userProfile.age}
                    </div>
                  )}
                  {userProfile.email && (
                    <div className="flex items-center gap-2 text-sm">
                      <Mail className="h-4 w-4 text-muted-foreground" />
                      <span className="font-medium">Email:</span> {userProfile.email}
                    </div>
                  )}
                  {userProfile.phone && (
                    <div className="flex items-center gap-2 text-sm">
                      <Phone className="h-4 w-4 text-muted-foreground" />
                      <span className="font-medium">Phone:</span> {userProfile.phone}
                    </div>
                  )}
                  {userProfile.region && (
                    <div className="flex items-center gap-2 text-sm">
                      <MapPin className="h-4 w-4 text-muted-foreground" />
                      <span className="font-medium">Region:</span> {userProfile.region}
                    </div>
                  )}
                </div>
              </div>

              {/* Financial Profile */}
              {userProfile.clientType && (
                <div className="space-y-3">
                  <h4 className="font-semibold text-secondary flex items-center gap-2">
                    <Target className="h-4 w-4" />
                    {getTranslation('financialProfile')}
                  </h4>
                  <div className="ml-6 space-y-2">
                    <div className="flex items-center gap-2">
                      <span className="text-lg">{clientTypes[userProfile.clientType]?.icon}</span>
                      <span className="font-medium">
                        {clientTypes[userProfile.clientType]?.name[language] || clientTypes[userProfile.clientType]?.name.en}
                      </span>
                    </div>
                    {userProfile.experience && (
                      <div className="flex items-center gap-2 text-sm">
                        <span className="font-medium">Experience Level:</span>
                        <Badge variant="secondary">
                          {experienceLabels[language]?.[userProfile.experience] || userProfile.experience}
                        </Badge>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* Goals & Preferences */}
              {(userProfile.financialGoals?.length > 0 || userProfile.accessibilityNeeds?.length > 0) && (
                <div className="space-y-3">
                  <h4 className="font-semibold text-accent flex items-center gap-2">
                    <Globe className="h-4 w-4" />
                    {getTranslation('preferences')}
                  </h4>
                  <div className="ml-6 space-y-2">
                    {userProfile.financialGoals?.length > 0 && (
                      <div>
                        <span className="text-sm font-medium block mb-1">Financial Goals:</span>
                        <div className="flex flex-wrap gap-1">
                          {userProfile.financialGoals.slice(0, 3).map((goal: string, index: number) => (
                            <Badge key={index} variant="outline" className="text-xs">
                              {goal}
                            </Badge>
                          ))}
                          {userProfile.financialGoals.length > 3 && (
                            <Badge variant="outline" className="text-xs">
                              +{userProfile.financialGoals.length - 3} more
                            </Badge>
                          )}
                        </div>
                      </div>
                    )}
                    {userProfile.accessibilityNeeds?.length > 0 && (
                      <div>
                        <span className="text-sm font-medium block mb-1">Accessibility Needs:</span>
                        <div className="flex flex-wrap gap-1">
                          {userProfile.accessibilityNeeds.map((need: string, index: number) => (
                            <Badge key={index} variant="outline" className="text-xs">
                              {need}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </CardContent>
          </Card>

          <Separator />

          {/* Data Protection Policy */}
          <Card className="border-accent/20">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-lg text-accent">
                <Shield className="h-5 w-5" />
                {getTranslation('policyTitle')}
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <p className="text-sm text-muted-foreground leading-relaxed">
                {getTranslation('policyText')}
              </p>
              <ul className="space-y-2 text-sm">
                <li className="flex items-start gap-2">
                  <Shield className="h-4 w-4 text-success mt-0.5 flex-shrink-0" />
                  <span>{getTranslation('dataUse')}</span>
                </li>
                <li className="flex items-start gap-2">
                  <Shield className="h-4 w-4 text-success mt-0.5 flex-shrink-0" />
                  <span>{getTranslation('dataProtection')}</span>
                </li>
                <li className="flex items-start gap-2">
                  <Shield className="h-4 w-4 text-success mt-0.5 flex-shrink-0" />
                  <span>{getTranslation('noSharing')}</span>
                </li>
                <li className="flex items-start gap-2">
                  <Shield className="h-4 w-4 text-success mt-0.5 flex-shrink-0" />
                  <span>{getTranslation('rightToDelete')}</span>
                </li>
                <li className="flex items-start gap-2">
                  <Shield className="h-4 w-4 text-success mt-0.5 flex-shrink-0" />
                  <span>{getTranslation('compliance')}</span>
                </li>
              </ul>
            </CardContent>
          </Card>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-3 pt-4">
            <Button
              onClick={() => onOpenChange(false)}
              variant="outline"
              className="flex-1 h-12"
            >
              {getTranslation('declineButton')}
            </Button>
            <Button
              onClick={onAccept}
              className="flex-1 h-12 bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90 text-white font-semibold"
            >
              <Shield className="h-4 w-4 mr-2" />
              {getTranslation('acceptButton')}
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};